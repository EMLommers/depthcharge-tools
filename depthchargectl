#!/bin/sh
set -eu

usage() {
cat <<EOF
Usage:
 depthchargectl [options] command ...

Manage ChromeOS kernel partitions.

Global options:
 -h, --help                 Show this help message.
 -v, --verbose              Print more detailed output.
EOF
}

STATE_DIR="/home/alpernebbi/.cache/depthchargectl"
IMAGES_DIR="${STATE_DIR}/images"
mkdir -p "$STATE_DIR" "$IMAGES_DIR"
readonly STATE_DIR IMAGES_DIR

. "lib/msg.sh"
. "lib/disks.sh"
. "lib/ifs.sh"
. "lib/tmp.sh"
. "lib/config.sh"
. "lib/kernel.sh"


# Parse options and arguments
# ---------------------------

set_cmd() {
    if [ -n "${COMMAND:-}" ]; then
        error "Can't set command twice ('$COMMAND', '$1')."
    fi

    COMMAND="$1"
    readonly COMMAND

    cmd="lib/depthchargectl/$COMMAND.sh"
    if [ ! -r "$cmd" ]; then
        usage_error "'$COMMAND' is not a valid depthchargectl command."
    fi

    # This should give us cmd_args, cmd_defaults and cmd_main functions.
    # It also replaces the usage text with its own.
    . "$cmd"
}

# Check verbose options before printing anything.
for arg in "$@"; do
    case "${arg:-}" in
        -v|--verbose) VERBOSE=yes ;;
        --) break ;;
    esac
done

while [ "$#" -gt 0 ]; do
    case "$1" in
        # Global options:
        -h|--help)      usage;          exit 0 ;;
        -v|--verbose)   VERBOSE=yes;    shift; continue ;;

        # May be command options, but not commands themselves.
        -*) if [ -z "${COMMAND:-}" ]; then
                usage_error "Global option '$1' not understood."
            fi
            ;;
    esac

    # Commands or command arguments.
    if [ -z "${COMMAND:-}" ]; then
        set_cmd "$1"
        shift
    else
        # Should return number of elemets to shift, never zero.
        if cmd_args "$@"; then
            error "Parser for command '$COMMAND' couldn't parse args."
        else
            shift "$?"
        fi
    fi
done


# User configuration
# ------------------

CONFIG_FILE="conf/config"
CONFIG="$(read_files "$CONFIG_FILE" "${CONFIG_FILE}.d"/*)" \
    || error "Could not read configuration files."

readonly CONFIG_FILE CONFIG

config() {
    printf "%s\n" "$CONFIG" | parse_field "$1"
}

# User configuration.
CONFIG_MACHINE="$(config Machine)" || :
CONFIG_COMPRESS="$(config Kernel-Compression)" || :
CONFIG_CMDLINE="$(config Kernel-Cmdline)" || :
CONFIG_VBOOT_DEVKEYS="$(config Vboot-Keys-Dir)" || :
CONFIG_VBOOT_KEYBLOCK="$(config Vboot-Keyblock)" || :
CONFIG_VBOOT_SIGNPRIVATE="$(config Vboot-Private-Key)" || :
CONFIG_VBOOT_SIGNPUBKEY="$(config Vboot-Public-Key)" || :

: "${CONFIG_CMDLINE:=quiet splash}"
: "${CONFIG_COMPRESS:=none lz4 lzma}"
: "${CONFIG_VBOOT_DEVKEYS:=/usr/share/vboot/devkeys}"
: "${CONFIG_VBOOT_KEYBLOCK:=${CONFIG_VBOOT_DEVKEYS}/kernel.keyblock}"
: "${CONFIG_VBOOT_SIGNPUBKEY:=${CONFIG_VBOOT_DEVKEYS}/kernel_subkey.vbpubk}"
: "${CONFIG_VBOOT_SIGNPRIVATE:=${CONFIG_VBOOT_DEVKEYS}/kernel_data_key.vbprivk}"

readonly CONFIG_MACHINE CONFIG_COMPRESS CONFIG_CMDLINE


# Machine database
# ----------------

DB_FILE="conf/db"
USERDB_FILE="conf/userdb"
MACHINEDB="$(read_files "$DB_FILE" "$USERDB_FILE" "${USERDB_FILE}.d"/*)" \
    || error "Could not read machine database."

readonly DB_FILE USERDB_FILE MACHINEDB

machine_config() {
    printf "%s\n" "$MACHINEDB" \
        | parse_machine_field "${2:-$MACHINE}" "$1"
}

detect_machine() {
    if machine="$(cat /proc/device-tree/model)" && [ -n "$machine" ]; then
        info "Detected machine from device-tree: '$machine'"
        printf "%s\n" "$machine"
    else
        return 1
    fi
}

# We will check this in subcommands, not here, since only some commands
# are machine-dependent.
machine_is_supported() {
    printf "%s\n" "$MACHINEDB" \
        | parse_machine_exists "${1:-$MACHINE}"
}

DETECTED_MACHINE="$(detect_machine)"
if [ -n "$CONFIG_MACHINE" ] ; then
    info "Overriding detected machine '$DETECTED_MACHINE' with" \
        "'$CONFIG_MACHINE' from user configuration."
    MACHINE="$CONFIG_MACHINE"
else
    MACHINE="$DETECTED_MACHINE"
fi

MACHINE_DTB_NAME="$(machine_config DTB-Name)" || :
MACHINE_MAX_SIZE="$(machine_config Max-Size)" || :

: "${MACHINE_DTB_NAME:=*.dtb}"
: "${MACHINE_MAX_SIZE:=}"

readonly DETECTED_MACHINE MACHINE MACHINE_DTB_NAME MACHINE_MAX_SIZE


# Set argument defaults
# ---------------------

# List partitions by default.
if [ -z "${COMMAND:-}" ]; then
    set_cmd partitions
fi

# Set defaults for the active command.
cmd_defaults

# Verbosity options.
: "${VERBOSE:=no}"
: "${QUIET:=no}"
: "${SILENT:=no}"


# Execute chosen command
# ----------------------

cmd_main
