#!/bin/sh
set -e

# Import common functions
. "./functions"

# We need to use a non-space separator to support paths with spaces.
# Instead of hard-coding it everywhere, let's put it in a variable.
# To support e.g. DTBS=$(find ...) we also need a newline in the IFS.
# Also keep a copy of the original so we can restore it.
SEP=","
NEWLINE="
"
ORIG_IFS="$IFS"
CUSTOM_IFS="${NEWLINE}${SEP}"

print_help() {
cat <<EOF
Usage: mkdepthcharge [options] -o FILE [--] vmlinuz [initrd] [dtb ...]

Options:
 -h, --help              Show this help message.
 -v, --verbose           Print more detailed output.
 -o, --output FILE       Write resulting image to FILE.
 -c, --cmdline CMD       Command-line parameters for the kernel. Can
                         be used multiple times to append new values.
 -C, --compress TYPE     Compress kernel with one of: none, lz4, lzma.
 -n, --description DESC  Description to use as a mkimage argument.
EOF
}

while [ "$#" -gt 0 ]; do
    case "$1" in
        -h|--help)
            print_help
            exit 0
            ;;
        -v|--verbose)
            VERBOSE=yes
            shift
            ;;
        -o|--output)
            OUTPUT="$2"
            shift 2
            ;;
        -C|--compress)
            COMPRESS="$2"
            shift 2
            ;;
        -n|--description)
            DESCRIPTION="$2"
            shift 2
            ;;
        -c|--cmdline)
            CMDLINE="${CMDLINE} $2"
            CMDLINE="${CMDLINE# }"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        -*)
            usage_error "Option '$1' not understood."
            ;;
        *)
            break
            ;;
    esac
done

while [ "$#" -gt 0 ]; do
    case "$1" in
        -*)
            usage_error "Options must precede input filenames."
            ;;
        *dtb*)
            DTBS="${DTBS}${SEP}$1"
            DTBS="${DTBS#${SEP}}"
            shift
            ;;
        *initrd*|*initramfs*|*cpio*)
            INITRAMFS="$1"
            shift
            ;;
        *vmlinuz*|*vmlinux*|*linux*|*Image*)
            VMLINUZ="$1"
            shift
            ;;
        *)
            if [ -z "$VMLINUZ" ]; then
                VMLINUZ="$1"
                shift
            elif [ -z "$INITRAMFS" ]; then
                INITRAMFS="$1"
                shift
            else
                DTBS="${DTBS}${SEP}$1"
                DTBS="${DTBS#${SEP}}"
                shift
            fi
            ;;
    esac
done

if [ -z "$OUTPUT" ]; then
    usage_error "Output argument is mandatory."
fi

if [ -z "$VMLINUZ" ]; then
    usage_error "Input file vmlinuz is required."
elif [ ! -r "$VMLINUZ" ]; then
    error "File '$VMLINUZ' (vmlinuz) not found or is not readable."
else
    info "Using vmlinuz: '$VMLINUZ'"
fi

if [ -n "$INITRAMFS" ]; then
    if [ ! -r "$INITRAMFS" ]; then
        error "File '$INITRAMFS' (initramfs) not found or is not readable."
    else
        info "Using initramfs: '$INITRAMFS'"
    fi
fi

IFS="$CUSTOM_IFS"
for DTB in $DTBS; do
    if [ ! -r "$DTB" ]; then
        error "File '$DTB' (dtb) not found or is not readable."
    else
        info "Using dtb: '$DTB'"
    fi
done
IFS="$ORIG_IFS"

: "${ARCH:=$(arch)}"
case "$ARCH" in
    arm64|aarch64) MKIMAGE_ARCH=arm64;  VBOOT_ARCH=aarch64 ;;
    arm*)          MKIMAGE_ARCH=arm;    VBOOT_ARCH=arm ;;
    amd64|x86_64)  MKIMAGE_ARCH=x86_64; VBOOT_ARCH=amd64 ;;
    x86|i386)      MKIMAGE_ARCH=x86;    VBOOT_ARCH=x86 ;;
    *) error "Architecture '$ARCH' is not supported." ;;
esac

# mkimage can't open files when they are read-only for some reason.
# Copy them into a temporary dir in fear of modifying the originals.
tmp="$(mktemp -td mkdepthcharge.XXXXXXXX)"
trap 'rm -rf "${tmp}"' EXIT

: "${COMPRESS:=none}"
case "$COMPRESS" in
    lz4)
        info "Compressing kernel with lz4."
        lz4 -z -9 <"$VMLINUZ" >"${tmp}/vmlinuz.lz4"
        VMLINUZ="${tmp}/vmlinuz.lz4"
        ;;
    lzma)
        info "Compressing kernel with lzma."
        lzma -z <"$VMLINUZ" >"${tmp}/vmlinuz.lzma"
        VMLINUZ="${tmp}/vmlinuz.lzma"
        ;;
    none)
        cp "$VMLINUZ" "${tmp}/vmlinuz"
        VMLINUZ="${tmp}/vmlinuz"
        ;;
    *)
        error "Compression type '$COMPRESS' is not supported." \
                "Valid values are: none, lz4, lzma."
        ;;
esac

if [ -n "$INITRAMFS" ]; then
    cp "$INITRAMFS" "${tmp}/initrd.img"
    INITRAMFS="${tmp}/initrd.img"
    MKIMAGE_INITRAMFS_ARGS="-i${SEP}${INITRAMFS}"
fi

IFS="$CUSTOM_IFS"
if [ -n "$DTBS" ]; then
    mkdir -p "${tmp}/dtbs"
    cp -t "${tmp}/dtbs/" -- $DTBS
    DTBS="$(find "${tmp}/dtbs/" -type f)"
    MKIMAGE_DTB_ARGS="$(printf -- "-b${SEP}%s${SEP}" $DTBS)"
fi
IFS="$ORIG_IFS"

# Somehow mkimage needs write permissions, add them since we've already
# copied the files to a temporary directory.
if [ ! -w "$VMLINUZ" ]; then
    chmod +w "$VMLINUZ"
fi

if [ -n "$INITRAMFS" ] && [ ! -w "$INITRAMFS" ]; then
    chmod +w "$INITRAMFS"
fi

IFS="$CUSTOM_IFS"
for DTB in $DTBS; do
    if [ ! -w "$DTB" ]; then
        chmod +w "$DTB"
    fi
done
IFS="$ORIG_IFS"

# If kernel.args is empty, vbutil_kernel returns an error.
# Use "--" instead of putting a newline or a space into the cmdline.
: "${CMDLINE:=--}"
echo -n $CMDLINE >"${tmp}/kernel.args"

if [ -z "$BOOTSTUB" ]; then
    case "$VBOOT_ARCH" in
        arm*|aarch64)
            info "Using dummy file for bootloader."
            dd if=/dev/zero of="${tmp}/bootstub.bin" \
                count=1 bs=512 status=none
            BOOTSTUB="${tmp}/bootstub.bin"
            ;;
        x86|amd64|*)
            error "Architecture '$VBOOT_ARCH' needs a bootstub binary."
            ;;
    esac
fi

pack_fit() {
    IFS="$CUSTOM_IFS"
    mkimage \
        -f auto \
        -A "$MKIMAGE_ARCH" \
        -O linux \
        -C "$COMPRESS" \
        -n "$DESCRIPTION" \
        -d "$VMLINUZ" \
        $MKIMAGE_INITRAMFS_ARGS \
        $MKIMAGE_DTB_ARGS \
        "${tmp}/depthcharge.itb" \
        || error "Could not pack inputs into a FIT image."
    IFS="$ORIG_IFS"
}

info "Running mkimage:"
if [ "$VERBOSE" = yes ]; then
    pack_fit
else
    pack_fit >/dev/null
fi

: "${VBOOT_DEVKEYS:=/usr/share/vboot/devkeys}"
: "${VBOOT_KEYBLOCK:=${VBOOT_DEVKEYS}/kernel.keyblock}"
: "${VBOOT_SIGNPUBKEY:=${VBOOT_DEVKEYS}/kernel_subkey.vbpubk}"
: "${VBOOT_SIGNPRIVATE:=${VBOOT_DEVKEYS}/kernel_data_key.vbprivk}"

pack_depthcharge() {
    futility vbutil_kernel \
        --version 1 \
        --arch "$VBOOT_ARCH" \
        --vmlinuz "${tmp}/depthcharge.itb" \
        --config "${tmp}/kernel.args" \
        --bootloader "$BOOTSTUB" \
        --keyblock "$VBOOT_KEYBLOCK" \
        --signprivate "$VBOOT_SIGNPRIVATE" \
        --pack "${tmp}/depthcharge.img" \
        || error "Could not pack inputs into a depthcharge image."
}

info "Running vbutil_kernel (pack):"
if [ "$VERBOSE" = yes ]; then
    pack_depthcharge
else
    pack_depthcharge >/dev/null
fi

: "${DEPTHCHARGE_MAX_SIZE:=0}"
if [ "${DEPTHCHARGE_MAX_SIZE}" -gt 0 ]; then
    info "Checking if image fits into size limit."
    size_check "${tmp}/depthcharge.img" "$DEPTHCHARGE_MAX_SIZE" \
        || error "Output image size too big to boot."
fi

verify_depthcharge() {
    futility vbutil_kernel \
        --signpubkey "$VBOOT_SIGNPUBKEY" \
        --verify "${tmp}/depthcharge.img" \
        || error "Generated image cannot be verified by vbutil_kernel."
}

info "Running vbutil_kernel (verify):"
if [ "$VERBOSE" = yes ]; then
    verify_depthcharge
else
    verify_depthcharge >/dev/null
fi

info "Copying image to output '$OUTPUT'."
cp -f "${tmp}/depthcharge.img" "$OUTPUT" \
    || error "Couldn't copy to output."
