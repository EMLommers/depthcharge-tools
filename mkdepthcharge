#!/bin/sh
set -e

_echo() {
    if [ "$#" -gt 0 ]; then
        echo "$0:" "$@"
    fi
}

info() {
    _echo "$@"
}

warn() {
    _echo "warning:" "$@" >&2
}

error() {
    _echo "error:" "$@" >&2
    exit 1
}

error_help() {
    _echo "error:" "$@" "\n" >&2
    print_help >&2
    exit 1
}

print_help() {
cat <<EOF
Usage: mkdepthcharge [options] -o FILE [--] vmlinuz [initrd] [dtb ...]

Options:
 -h, --help              Show this help message.
 -o, --output FILE       Write resulting image to FILE.
 -c, --cmdline CMD       Command-line parameters for the kernel. Can
                         be used multiple times to append new values.
 -C, --compress TYPE     Compress kernel with one of: none, lz4, lzma.
 -n, --description DESC  Description to use as a mkimage argument.
EOF
}

while [ "$#" -gt 0 ]; do
    case "$1" in
        -h|--help)
            print_help
            exit 0
            ;;
        -o|--output)
            OUTPUT="$2"
            shift 2
            ;;
        -C|--compress)
            COMPRESS="$2"
            shift 2
            ;;
        -n|--description)
            DESCRIPTION="$2"
            shift 2
            ;;
        -c|--cmdline)
            CMDLINE="${CMDLINE# } $2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        -*)
            error_help "Option '$1' not understood."
            ;;
        *)
            break
            ;;
    esac
done

while [ "$#" -gt 0 ]; do
    case "$1" in
        -*)
            error_help "Options must precede input filenames."
            ;;
        *dtb*)
            DTBS="$DTBS $1"
            shift
            ;;
        *initrd*|*initramfs*|*cpio*)
            INITRAMFS="$1"
            shift
            ;;
        *vmlinuz*|*vmlinux*|*linux*|*Image*)
            VMLINUZ="$1"
            shift
            ;;
        *)
            if [ -z "$VMLINUZ" ]; then
                VMLINUZ="$1"
                shift
            elif [ -z "$INITRAMFS" ]; then
                INITRAMFS="$1"
                shift
            else
                DTBS="$DTBS $1"
                shift
            fi
            ;;
    esac
done

if [ -z "$OUTPUT" ]; then
    error_help "Output argument is mandatory."
fi

if [ -z "$VMLINUZ" ]; then
    error_help "Input file vmlinuz is required."
fi

: "${ARCH:=$(arch)}"
case "$ARCH" in
    arm64|aarch64) MKIMAGE_ARCH=arm64;  VBOOT_ARCH=aarch64 ;;
    arm*)          MKIMAGE_ARCH=arm;    VBOOT_ARCH=arm ;;
    amd64|x86_64)  MKIMAGE_ARCH=x86_64; VBOOT_ARCH=amd64 ;;
    x86|i386)      MKIMAGE_ARCH=x86;    VBOOT_ARCH=x86 ;;
    *) error "Architecture '$ARCH' is not supported." ;;
esac

# mkimage can't open files when they are read-only for some reason.
# Copy them into a temporary dir in fear of modifying the originals.
tmp="$(mktemp -td mkdepthcharge.XXXXXXXX)"
trap 'rm -rf "${tmp}"' EXIT

: "${COMPRESS:=none}"
case "$COMPRESS" in
    lz4)
        info "Compressing kernel with lz4."
        lz4 -z -9 <"$VMLINUZ" >"${tmp}/vmlinuz.lz4"
        VMLINUZ="${tmp}/vmlinuz.lz4"
        ;;
    lzma)
        info "Compressing kernel with lzma."
        lzma -z <"$VMLINUZ" >"${tmp}/vmlinuz.lzma"
        VMLINUZ="${tmp}/vmlinuz.lzma"
        ;;
    none)
        cp "$VMLINUZ" "${tmp}/vmlinuz"
        VMLINUZ="${tmp}/vmlinuz"
        ;;
    *)
        error "Compression type '$COMPRESS' is not supported." \
                "Valid values are: none, lz4, lzma."
        ;;
esac

if [ -n "$INITRAMFS" ]; then
    cp "$INITRAMFS" "${tmp}/initrd.img"
    INITRAMFS="${tmp}/initrd.img"
    MKIMAGE_INITRAMFS_ARGS="-i $INITRAMFS"
fi

if [ -n "$DTBS" ]; then
    mkdir -p "${tmp}/dtbs"
    cp $DTBS "${tmp}/dtbs/"
    DTBS="${tmp}/dtbs/"*
    MKIMAGE_DTB_ARGS=
    for DTB in $DTBS; do
        MKIMAGE_DTB_ARGS="${MKIMAGE_DTB_ARGS# } -b $DTB"
    done
fi

# If kernel.args is empty, vbutil_kernel returns an error.
# Use "--" instead of putting a newline or a space into the cmdline.
: "${CMDLINE:=--}"
echo -n $CMDLINE >"${tmp}/kernel.args"

if [ -z "$BOOTSTUB" ]; then
    case "$VBOOT_ARCH" in
        arm*|aarch64)
            info "Using dummy file for bootloader."
            dd if=/dev/zero of="${tmp}/bootstub.bin" \
                count=1 bs=512 status=none
            BOOTSTUB="${tmp}/bootstub.bin"
            ;;
        x86|amd64|*)
            error "Architecture '$VBOOT_ARCH' needs a bootstub binary."
            ;;
    esac
fi

info "Running mkimage:"
mkimage \
    -f auto \
    -A "$MKIMAGE_ARCH" \
    -O linux \
    -C "$COMPRESS" \
    -n "$DESCRIPTION" \
    -d "$VMLINUZ" \
    $MKIMAGE_INITRAMFS_ARGS \
    $MKIMAGE_DTB_ARGS \
    "${tmp}/depthcharge.itb"

: "${VBOOT_DEVKEYS:=/usr/share/vboot/devkeys}"
: "${VBOOT_KEYBLOCK:=${VBOOT_DEVKEYS}/kernel.keyblock}"
: "${VBOOT_SIGNPUBKEY:=${VBOOT_DEVKEYS}/kernel_subkey.vbpubk}"
: "${VBOOT_SIGNPRIVATE:=${VBOOT_DEVKEYS}/kernel_data_key.vbprivk}"

info "Running vbutil_kernel (pack)."
futility vbutil_kernel \
    --version 1 \
    --arch "$VBOOT_ARCH" \
    --vmlinuz "${tmp}/depthcharge.itb" \
    --config "${tmp}/kernel.args" \
    --bootloader "$BOOTSTUB" \
    --keyblock "$VBOOT_KEYBLOCK" \
    --signprivate "$VBOOT_SIGNPRIVATE" \
    --pack "${tmp}/depthcharge.img"

: "${DEPTHCHARGE_SIZE_LIMIT:=33554432}"

DEPTHCHARGE_SIZE="$(stat -c '%s' "${tmp}/depthcharge.img")"
if [ "$DEPTHCHARGE_SIZE" -gt "$DEPTHCHARGE_SIZE_LIMIT" ]; then
    error "Output image size too big to boot."
fi

info "Running vbutil_kernel (verify):"
futility vbutil_kernel \
    --signpubkey "$VBOOT_SIGNPUBKEY" \
    --verify "${tmp}/depthcharge.img"

info "Copying image to output."
cp -f "${tmp}/depthcharge.img" "$OUTPUT"
info "done."
